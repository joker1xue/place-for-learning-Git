//23.08.30

//Git

/*************************************************/
Git是一个免费、开源的分布式版本控制系统
版本控制：个人开发过渡到团队开发

集中式版本控制：
所有版本信息都存储在服务器上，协同开发者从服务器上同步更新自己的修改，用户本地只有以前同步过的系统，不联网就不能看到历史版本，也无法切换版本验证问题或
在不同分支工作。所有数据都存储在单一服务器上，如果服务器发生损坏，会导致数据丢失。
SVN(Subversion), CVS(Concurrent Version System),VSS

分布式版本控制：
每个人都能拥有全部的代码，可以在本地进行版本的修改并提交，联网时自动push到对应的仓库，一个用户的设备没有出现损坏就可以恢复所有的数据
Git，永远滴神。

工作机制：
      add      commit    push
工作区--->暂存区--->本地库--->远程库



/*************Git常用命令********************/

//设置用户签名：
git config --global user.name zxy

//设置用户邮箱：
git config --global name@hust.com

//初始化本地库：（创建一个.git的隐藏文件，请勿随意修改）               
git init

//查看隐藏文件：
ll -a

//查看本地库状态：
git status                               

//vim下复制粘贴：yy（复制）  p（粘贴）

//查看版本信息：
git reflog

//查看详细日志：
git log

//重置版本
git reset --hard /版本号/



/***************Git分支********************/

//分支：在版本控制过程中，同时推进多个任务，为了每个任务并行开发，
//可以为每一个任务创建一个分支，这样可以把工作从主线上分离下来，
//开发自己的功能。

//分支的好处：
//同时推进多个功能开发，提高开发效率
//开发过程中一个分支开发失误，不会影响其他的分支，删除即可

//创建分支
git branch branchName

//查看分支
git branch -v

//切换分支
git checkout branchName

//合并分支
git merge branchName

//冲突合并
//当合并的不同分支在同一处做了不同修改时会发生冲突，这时需要手动合并


























